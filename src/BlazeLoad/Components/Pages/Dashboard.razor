@page "/"
@using BlazeLoad.Components.Controls
@using BlazeLoad.Components.Dialogs
@using BlazeLoad.Models
@using BlazeLoad.Services

@inject IDialogService DialogService
@inject PersistentDownloadService Downloads

<PageTitle>BlazeLoad - Dashboard</PageTitle>
<MudDivider Class="my-2"/>
<DownloadToolBar OnAddDownload="ShowAddDialog"
                 TotalSpeed="@Downloads.TotalSpeedFormatted"
                 Active="@Downloads.ActiveCount"
                 Queued="@Downloads.QueuedCount"
                 Total="@Downloads.TotalCount"
                 OnPauseAll="@OnPauseAll"
                 OnStopAll="@OnStopAll"
                 RpcConnected="@Downloads.RpcConnection"/>

<MudDivider Class="my-2"/>

<DownloadList Items="@Downloads.Active"
              OnResume="@OnResumeClicked"
              OnStop="@OnStopClicked"
              OnPause="@OnPauseClicked"/>

@code {

    protected override void OnInitialized()
    {
        Downloads.Updated += OnDownloadsUpdated;
    }

    private void OnDownloadsUpdated()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task OnResumeClicked(DownloadItem item)
    {
        await Downloads.ResumeAsync(item);
    }
    
    private async Task OnPauseClicked(DownloadItem item)
    {
        await Downloads.PauseAsync(item);
    }

    private async Task OnStopClicked(DownloadItem item)
    {
        await Downloads.StopAsync(item);
    }

    public void Dispose()
    {
        Downloads.Updated -= OnDownloadsUpdated;
    }
    
    private Task OnPauseAll() => Downloads.PauseAllAsync();
    private Task OnStopAll()  => Downloads.StopAllAsync();

    private async Task ShowAddDialog()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dlgRef = await DialogService.ShowAsync<AddDownloadDialog>("Download hinzufügen", options);
        var result = await dlgRef.Result;

        if (result is { Canceled: false, Data: AddDownloadDialog.AddDownloadModel m })
        {
            await Downloads.AddAsync(m.Url, m.TargetDirectory, m.FileName);

            // gewünschten Dateinamen einsetzen, falls anders als URL-Name
            var item = Downloads.Queue.LastOrDefault();
            if (item is not null) item.Name = m.FileName;
        }
    }

}