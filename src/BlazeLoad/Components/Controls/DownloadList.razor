@using BlazeLoad.Models

@inject NavigationManager Navigation

<MudTable Items="Items"
          Class="w-100"
          Dense="true"
          Hover="true"
          Elevation="0"
          HorizontalScrollbar="true"
          Bordered="false">

    <HeaderContent>
        <MudTh>Status</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Information</MudTh>
        <MudTh Align="Right">Size</MudTh>
        <MudTh Align="Right">Progress</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>
            <MudChip T="DownloadState"
                     Color="@StatusColor(context.State)"
                     Size="Size.Small"
                     DisableRipple="true">
                @context.State
            </MudChip>
        </MudTd>

        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Info</MudTd>
        <MudTd Align="Right">@context.SizeFormatted</MudTd>

        <MudTd Align="Right">
            <MudStack Direction="Row" Row="true" AlignItems="AlignItems.Center" JustifyContent="FlexEnd" Spacing="1">
                <MudText Typo="Typo.body2">@($"{context.ProgressPercent:0}%")</MudText>
                @if (context.State != DownloadState.Complete)
                {
                    @if (context.State == DownloadState.Paused || context.State == DownloadState.Stopped)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                                       Size="Size.Small"
                                       OnClick="@(() => OnResume.InvokeAsync(context))"/>
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Pause"
                                       Size="Size.Small"
                                       OnClick="@(() => OnPause.InvokeAsync(context))"/>
                    }

                    <MudIconButton Icon="@Icons.Material.Filled.Stop"
                                   Size="Size.Small"
                                   Disabled="@(context.State == DownloadState.Stopped)"
                                   OnClick="@(() => OnStop.InvokeAsync(context))"/>
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Download"
                                   Size="Size.Small"
                                   OnClick="@(() => DownloadFile(context))"/>
                }
            </MudStack>
        </MudTd>
    </RowTemplate>

    <ChildRowContent>
        <MudTd ColSpan="5" Class="pt-0 pb-8">
            <MudProgressLinear Value="context.ProgressPercent"
                               Striped="true"
                               Height="8"
                               Class="w-100"/>
        </MudTd>
    </ChildRowContent>
</MudTable>

@code {

    [Parameter]
    public IEnumerable<DownloadItem> Items { get; set; } = [];

    [Parameter]
    public EventCallback<DownloadItem> OnResume { get; set; }

    [Parameter]
    public EventCallback<DownloadItem> OnPause { get; set; }

    [Parameter]
    public EventCallback<DownloadItem> OnStop { get; set; }
    
    private void DownloadFile(DownloadItem item)
    {
        Navigation.NavigateTo($"/api/downloads/{item.BackendId}", forceLoad: true);
    }

    /* ---------- Hilfsfunktionen ---------- */
    private Color StatusColor(DownloadState status) => status switch
    {
        DownloadState.Complete => Color.Success,
        DownloadState.Downloading => Color.Info,
        DownloadState.Paused => Color.Warning,
        DownloadState.Stopped => Color.Dark,
        DownloadState.Error => Color.Error,
        _ => Color.Default
    };

}