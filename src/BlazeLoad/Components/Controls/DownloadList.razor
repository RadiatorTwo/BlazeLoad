@using BlazeLoad.Models
@using Downloader
<MudTable Items="Items"
          Class="w-100"
          Dense="true"
          Hover="true"
          Elevation="0"
          HorizontalScrollbar="true"
          Bordered="false">

    <!-- SpaltenÃ¼berschriften -->
    <HeaderContent>
        <MudTh>Status</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Information</MudTh>
        <MudTh Align="Right">Size</MudTh>
        <MudTh Align="Right">Progress</MudTh>
    </HeaderContent>

    <!-- 1. Zeile je Datensatz (Metadaten) -->
    <RowTemplate>
        <MudTd>
            <MudChip T="DownloadStatus"
                     Color="@StatusColor(context.Status)"
                     Size="Size.Small"
                     DisableRipple="true">
                @context.Status
            </MudChip>
        </MudTd>

        <MudTd>@context.FileName</MudTd>
        <MudTd>@context.Info</MudTd>
        <MudTd Align="Right">@context.SizeFormatted</MudTd>

        <MudTd Align="Right">
            <MudStack Direction="Row" Row="true" AlignItems="AlignItems.Center" JustifyContent="FlexEnd" Spacing="1">
                <MudText Typo="Typo.body2">@($"{context.ProgressPercent:0}%")</MudText>

                <MudIconButton Icon="@Icons.Material.Filled.Pause"
                               Size="Size.Small"
                               Disabled="@(context.Status is DownloadStatus.Paused or DownloadStatus.Stopped)"
                               OnClick="@(() => OnPause.InvokeAsync(context))"/>

                <MudIconButton Icon="@Icons.Material.Filled.Stop"
                               Size="Size.Small"
                               Disabled="@(context.Status == DownloadStatus.Stopped)"
                               OnClick="@(() => OnStop.InvokeAsync(context))"/>
            </MudStack>
        </MudTd>
    </RowTemplate>

    <!-- 2. Zeile je Datensatz (Fortschrittsbalken) -->
    <ChildRowContent>
        <MudTd ColSpan="5" Class="pt-0 pb-8">
            <MudProgressLinear Value="context.ProgressPercent"
                               Striped="true"
                               Height="8"
                               Class="w-100"/>
        </MudTd>
    </ChildRowContent>
</MudTable>

@code {

    /// <summary>Die anzuzeigenden Downloads.</summary>
    [Parameter]
    public IEnumerable<DownloadItem> Items { get; set; } = Enumerable.Empty<DownloadItem>();

    /// <summary>Event: User klickt Pause/Fortsetzen.</summary>
    [Parameter]
    public EventCallback<DownloadItem> OnPause { get; set; }

    /// <summary>Event: User klickt Stop.</summary>
    [Parameter]
    public EventCallback<DownloadItem> OnStop { get; set; }

    /* ---------- Hilfsfunktionen ---------- */
    private Color StatusColor(DownloadStatus status) => status switch
    {
        DownloadStatus.Running => Color.Success,
        DownloadStatus.Created => Color.Info,
        DownloadStatus.Paused => Color.Warning,
        DownloadStatus.Stopped => Color.Dark,
        DownloadStatus.Failed => Color.Error,
        _ => Color.Default
    };

}